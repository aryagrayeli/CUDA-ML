#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct ArchInfo {
  uint64_t layers;
  uint64_t * layers_size;
  char ** activation_function;
} ArchInfo;

typedef struct Model {
    double ** weights; // list of 2D weight matrix for each layer but flattened so 1D for CUDA
    double ** biases; // list of 1D bias vectors for each layer
    ArchInfo * arch_info; // architecture info
} Model;


void save_model(Model * model, char * checkpoint_path) {
  FILE* fp = fopen(checkpoint_path, "w");// "w" means that we are going to write on this file

  /* 
fprintf("%d\n", model->arch_info->layers);
  for(int i=0;i<model->arch_info->layers;i++) fprintf(fp, "%d ", model->arch_info->layers_size[i]);
  fprintf(fp, "\n");
  for(int i=1;i<model->arch_info->layers;i++) fprintf(fp, "%s ", model->arch_info->activation_function[i]);
  fprintf(fp, "\n");
  */
  
  for(int i=0;i<model->arch_info->layers-1;i++) {
    for(int j=0;j<model->arch_info->layers_size[i+1];j++)
      fprintf(fp, "%lf ", model->biases[i][j]);
    fprintf(fp, "\n");
  }

  for(int i=0;i<model->arch_info->layers-1;i++) {
    for(int j=0;j<(model->arch_info->layers_size[i] * model->arch_info->layers_size[i+1]);j++)
      fprintf(fp, "%lf ", model->weights[i][j]);
    fprintf(fp, "\n");
  }

  fclose(fp);
  
}

Model * load_model(char * checkpoint_path, ArchInfo * arch_info) {

  FILE* fp = fopen(checkpoint_path, "r");

  // should this be on GPU memory? Can change easily
  Model* loaded_model = (Model*)malloc(sizeof(Model));
  loaded_model->biases = (double**)(malloc(sizeof(double*) * (arch_info->layers-1)));
  
  for(int i=0;i<arch_info->layers-1;i++) {
    loaded_model->biases[i] = (double*)(malloc(sizeof(double) * arch_info->layers_size[i+1]));
    for(int j=0;j<arch_info->layers_size[i+1];j++)
      fscanf(fp, " %lf", &loaded_model->biases[i][j]);
  }

  for(int i=0;i<arch_info->layers-1;i++) {
    loaded_model->weights[i] = (double*)(malloc(sizeof(double) * arch_info->layers_size[i] * arch_info->layers_size[i+1]));
    for(int j=0;j<(arch_info->layers_size[i] * arch_info->layers_size[i+1]);j++)
      fscanf(fp, " %lf", &loaded_model->weights[i][j]);
  }

  fclose(fp);
  return loaded_model;
}
